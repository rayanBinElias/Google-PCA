Reliable Google Cloud Infrastructure: Design and Process
  - architecting and designing sys
    - architect your app using microservices

Defining Services
  Steps
    - Requirements
      - security
      - availability
      - durability
      - Cost
      - Disaster Recovery
    - Verify by maintenance
      - monitoring  
      - logging
  
  Activity 1: Defining your Case Study
    - Come up w/ an interestinc case Study
      - InvityCard  
    - Write a short description
      - InvityCard is a global AI generated wedding design card that wants 
      to build scalable platform to serve global customer base
    - list some main features
      - User can generate 10 designs at once for a minimum price
      - Strong social media integration w/ reviews, posts and analytics
      - App can recommend nearest printer shop
      - You can buy printer device too through the app
    - list user roles/Typical users
      - Wedding couple
      - Wedding card shop

  Agenda
    - Defining services
    - Microservice Design and Architecture
    - DevOps Automation
    - Choosing Storage Solutions
    - Google cloud and Hybrid Network Architecture
    - Deploying Applications to Google Cloud
    - Designing reliable systems
    - Reliability and security
    - Maintenance and monitoring

  Defining services
    In this module, you will learn to describe users of a system in terms of the roles and personas they take. You will learn how to measure success using Key performance indicators (KPIs) and you will examine service level objectives (SLOs), service level indicators (SLIs), and service level agreements (SLAs).
    Learning Objectives
      1. Describe users in terms of roles and personas.
      2. Evaluate KPIs using SLOs and SLIs.
      3. Determine the quality of application requirements using SMART crite
      
  Requirements, Analysis and Design
    Qualitative requirements from user's point of view
      Who
        - build full picture of who the sys will affect both directly and inderectly
        Who are the users?
        Who are the developers?
        Who are the stakeholders?
      What
        - What is the problem the sys aims to solve?
        What does the system do?
        What are the main features?
      Why
        - Helps defines KPIs, SLO's and SLA's
        Why is the system needed?
      When
        - determine realistic timeloine and help contain the scope
        When do the users need and/or want the solution?
        When can the developers be done?
      How
        - Determines a lot of the non functional requirements such as 
          - How many users need to support?
          - What is the ave payload size of service requests?
          - Are there latency requirements?
        How will the system work?
        How many users will there be?
        How much data will there be?
    
    Roles represent the goal of a user at some point
      Role are not people or job titles
        - people can play multiple roles
        - a single role can be played by multiple people

      Roles should describe a users objective
        - what does the user want to do?
        - "User" is not a good role(everyone is a user)

      Examples of Roles
        - shopper
        - account holder
        - customer
        - administrator
        - manager

    Personas describe a typical person who plays a role
      - in a real world app, go find your users and talk to them
      - personas tell a stroy of who they are
      - personas are not a list of a job functions
      - for each role, there could be many personas

      Example persona of requirements for a banking app:
        Jocelyn
          - busy working mom who wants access bank to check her balance
          - uses webstie to automate payment bills and view her credit account balances
          - wants to save time and money
          - wants credit card that givers her cash back

      User stories describe a feature from the user's point of view
       - give each story a title that describes its purpose
       - write a short, one sentence description
       - specify the user role, what they want to do, and why
       - use the template: As a [role], I want to...., so that I can ...

        Format:
          As a role, I want to action (so that benefit)
            - role is who
            - action is what
            - why is benefit
        
        Example user story:
          Balance Inquiry
            - As an account holder, I want to check my available balance at anyme
            of the day so I am sure not to overdraw my account

      Evaluate user stories with the INVEST criteria
        Independent
          - self-contained to prevent problems w/ prioritization and planning.
        Negotiable
          - not written like contract
          - stimulate discussion between customer and developers until clear agreement
        Valuable
          - provide value to end user
        Estimatable
          - must be estimatable so it can be properly prioritized
        Small
          - small so it can be completed in about 3 to 4 days
        Testable
          - user story can be confirmed/verified via pre written acceptance criteria
  
    Activity 2: Analyzing your case Study
      - refine the roles you listed in activity 1
      - write personas for each role
      - write user stories for the main feaures of your case Study

      sample  
        - andrew is a student who likes to travel home to cisit parents and also takes vacations twice yearly.
        His primary concern is cost, and he will alwasy book the lowest price travel regardless of convenience.
        Andrew has no loyalty and will use whichever retailer can provide the best deal

  SLOs, SLIs and SLAs
    -  to mange a service well:
      - which behaviors matter
      - how to measure and evaluate these behaviors

    Quantitative requirements are things that are measurable
      Example:
        Constraints:
          - time
          - finance
          - people

        What can be achieved: 
          - how many users are there?
          - how much data is there?
          - what are the rewards and risks?
          - which features and launched?

          durability  
            - for data storage sys, if there's a failure, do we lose any data

          throughput
            - for user facing sys, how many reqeusts can be handled
          availibility
            - for data storage sys, is data there when we need it
            - for user facing sys, was a request responded to

          latency 
            - for data storage sys, how long does it take to read and write data
            - for user facing sys, how long did it take to responsd? 

    KPIs and SLIs
      Key performance indicators
        - metrics that can be used to measure success
        - metric that indicates whether you are on track to achieve the goal
        - must be specific rather than general
        - not the same thing as a goal or objective
          - goal  
            - outcome/result you want to achieve

      sample:
        goal: increase turnover for an online store
        KPI: the percentage of conversions on the webstie

      In business:
        - ROI
        - earnings before interesta and taxes(EBIT)
        - employee turnover
        - cusotmer churn

      In software:
        - page views
        - user registrations
        - clickthroughs
        - checkouts

      how:
        for each goal
          - define KPIs that will allow to monitor and measure progress
        for each KPI
          - define targets for what success looks like

      For KPIs to be effective, they must be SMART
        Specific  
          "Section 508 Accessible" is more specific than "User Friendly"
        Measurable
          - find objectivie way tot est whether you're meeting KPIs
        Achievavle
          - Be realistic and define only possible
        Relevant
          - valuable to enduser
        Time-bound
          - per day/month/year

      SLI(service levle indicators)
        - measurable attribute of a service KPI
        - quantitative measure of some aspect of the level of service being provided
        - understanding what users want from a service will help inform the selection of indicators
        sample
          - availability, throughput, latency and error rate
          - http get reqests respond w/in 400ms aggregated per minute
          - percentage of successful requests over all requests aggregated per minute

        Tips
          - consider requests per second to a service
          - how is the value calculated
          - by measurements obtained once per second
          - use percentiles 
        
    SLOS abd SLAs
      - defines quantitative requirements
      
      SLOs(service level objectives)
        - must be achievable and relevant
        - number or the goal you want to achieve for a given SLI for a given duration
        - agreed-upon target or range of values for a service level that is measured by an SLI.
        format
          - SLI is smaller than equal to target or lower bound smaller and equal to SLI, smaller or equal to upper bound

        sample 
          - do you want 95% or 99% availability?
          SLI  
          - average latency of HTTP requests for our service should be less than 100 milliseconds
          - HTTP POST photo uploads complete within 100ms aggregated per minute
            - 80%
              - this might be good enough
          - available as measured with an uptime check every 10 seconds aggregated per minute
            - 99%
              - maybe good enougha nd easier and more cost-effective

        Tips
          - understand users to make them happy
            - make SLO as low as you can get away while making users happy
          - the higher you set SLO, the higher the cost in compute resources(redundancy) and operations effor(people time)
          - applications should not signigicantlhy outperform their SLOs
            because users come to expect the level of reliability you usually give them

      SLAs(service level aggreements)
        - binding contract providing the customer compensation if  service doesn't meet specific expectations
        - business contract between the provider and the customer
        - more restrictive version of SLO
        - architect a solution and maintain an agreed SLO so that we provide ourselves spare capacity against the SLA.

        SLA stipulates that:
          - penalty will apply to the provider if the service does not maintain certain availability
          and/or performance thresholds
          - if SLA is broken, customer will receive compensation from the provider

        Note:
          - SLA shoulad have a threshold that is lower than the SLO
          - not all services have an SLA but all services should have an SLO
          - SLO thresholds should be stricter than your SLA

        Example
          KPI
            - End-to-end latency of the successful HTTP responses averaged over one minute
          SLI
            - the latency of successful HTTP responses(HTTP-200)
          SLO
            - The latency of 99% of the responses must be <= 200 ms
          SLA
            - the user is compensated if 99th percentile latency exceeds 300 ms
    
    Activity 3: Defining SLIs and SLOs
      - Write SLIs and SLOs for your case study features

      sample
        User story
          1. search hotel and flight
        
        SLO
          - available 99.95%

        SLI
          - fraction of 200 vs 500 HTTP responses from API endpoint measured per month

  Quiz
    1. Which best describes an SLO?
      - It is a target measure you want your service to achieve.
        - an SLO 
          is the agreed-upon target for a measurement or range of values for a service. Reliability could be one of these.
    2. Using SMART criteria, which below would be the least effective KPI?
      - User experience design
        - user experience design is not measurable or time bound and so would not make a relevant KPI.
    3. Which most accurately describes a user story?
      - It is a short description of a feature written from the user's point of view.
        - describes a feature from the user's point of view
  
  Review
    Qualitative requirements
      - users cares about
        - features
      - user stories
        - write personas to understand users better

    Quantitative requirements
      - measurables
        - KPIs
          - sign-ups
          - clicks per sessiong
          - completed purchases
          - customer retention
        - SLI -> SLO -> SLA
          - latency
          - availability
          - response time

Microservice Design and Architecture
  - Introduce application architecture and microservice design.

  Learning Objectives
    1. Decompose monolithic applications into microservices.
    2. Recognize appropriate microservice boundaries.
    3. Identify the 12-factor best practices for implementing services.
    4. Design consistent, standard RESTful service APIs.
    5. Architect stateful and stateless services to optimize salability and reliability
    6. Build loosely coupled services by implementing a well designed REST architecture

  Microservices
    - divide a large program into multiple smaller, independent services

    Why?
      - enable teams to wokr independently and delivered through to production at their own cadence
        - supports scaling the organization
        - adding more teams increases speed
      - individuals components are deployable

    Pros
      - easier to develop and maintain
      - reduced risk when deploying new versions
      - services scale independently to optimize use of infrastructure
      - faster to innovate and add new features
      - can use different languages and frameworks for different services
      - choose runtime appropriate to each service
    Cons
      - increase complexity when communicating bet services
      - increased latency across service boundaries
      - concerns about securing inter-service traffic
      - multiple deployments
      - need to ensure that you don't break clients as version changes
      - must maintain backward compatibility with clients as the  microservices evolves
    
    Transforming app to microservices  architecture service boundaries
      Decompose applications by feature to minimize dependencies
        - reviews service
        - orders service
        - products service
        - etc.

      Organize services by architectural layer
        - web, android, and IOS user interfaces
        - data access services

      Isolate services that provide shared functionality
        - authentication service
        - reporting service
        - etc.

    Types of Microservices
      Stateful services
        - managed stored data over time
          - harder to scale
          - harder to upgrade
          - need to backup
          sample
            - reviews service + reviews DB

      Stateless services
        - get their data from the environment or other stateful services
          - easy to scale by adding instances
          - easy to migrate to new versions
          - easy to administer
          sample
            - web ui

    Best practices
      https://cloud.google.com/architecture/twelve-factor-app-development-on-gcp
      1. Avoid storing shared state in-memory on your servers
        - requires sticky sessions/sessions affinity to be set up in the load balancers
        - hinders elastic autoscaling

      2. Store state using backend storage services shared by the frontend server
        - cache state data for faster access
        - take advantage of google cloud-managed data services
          - firstore, cloud sql for state
          - memorstore for Redis for caching

      Twelve factor App
        - a set of best practices for building web or SaaS app
          - maximize portability
          - deploy to the cloud
          - enable conitnuous deployment
          - scale easily

        1. Codebase
          - source code tracked in version control for many deploys
          - use version control sys like Git
          - each microservice app has one code repo
          - each env has one code repo
        
        2. dependencies
          - explicitly declare and isolate dependencies
          - use package manager like maven/npm/pip/rye to install dependencies
          - declare dependencies in your code base
        
        3. Config
          - store config in the environment
          - don't put secrets, connection strings, endpoints, etc. in source code
          - store those as environment variables
        
        4. Backing Services
          - treat backing services as attached resources
          - DB, caches, queues, and other services are accessed via URLs.
          - aim is should be easy to swap one implementation for another
        
        5. Build, release, run
          - strictly separate build and run stages
          - build creates a deployment package from the source code
          - release combines the deployment w/ configuration in the runtime env
          - run exec the app

        6. Processes
          - execute the app as one or more stateless Processes
          - apps run in one or more Processes
          - each instance of the app gets its data from a separate DB service

        7. Port binding
          - export services via port binding
          - apps are self-contained and expose a port and protocol internally
          - apps are not injected into a separate server like APache
        
        8. Concurrency
          - scale out via the process model
          - because apps are self-contained and run in separate process, they scale easily by adding instances
        
        9. Disposability
          - maximize robustness w/ fast startup and graceful shutdown
          - app instances should scale quickly when needed
          - if an instance is not needed, you should be able to turn it off w/ no side effects
        
        10. Dev/prod parity
          - keep development, staging, and production as similar as possible
          - container sys lkike docker makes this easier
          - leverage infra as a code to make env easy to create
        
        11. Logs
          - Treat logs as event streams
          - write log messages to standard output and aggregate all logs to a single source
        
        12. Admin Processes
          - run admin/mngmt tasks as one-off Processes
          - admin tasks should be repeatable processes, not one-off manual tasks
          - admin tasks shouldn't be a part of the application
.

    Activity 4: Designing microservices for your application
      - Diagram the microservices required by your case-study applicxation
      https://www.coursera.org/learn/cloud-infrastructure-design-process/lecture/5BER9/activity-review-designing-microservices-for-your-application

  REST and APIs
    - a good microservice design is loosely coupled
    - clients shouldn't need to know too many details of services they use
    - services comm via HTTPS using text-based payloads
      - client makes GET, POST, PUT, or DELETE request
      - body of the request is formatted as JSON or XML
      - Results returned as JSON, XML or HTML
    - serices should add functionality w/o breaking existing clients
      - add, but don't remove, items from responses

    REST(Representational State Transfer)
      - supports loose coupling
      - protocol independent
        - HTTP is most common
        - Others possible like gRPC
          - support streaming
      - service endpoints supporting REST are called RESTful
      - client and server communicate w/ request = response processing
      - communicate over the web using HTTP(S)
      - URIs/endpoints identify resources
        - responses return an immutable representation of the resource information
      - REST app provide consistent, uniform interfaces
        - representation can have links to additional resources
      - caching of immutable representations is appropriate
      - a client and server exchange representations of a resource
        Resource
          - an abstract notion of information

          Sample:
            - dog
        
        Representation
          - a copy of the resource information
            - represantations can be single items or a collections of items
          
          sample:
            - Noir is a schnoodle
            - Bree is a mutt
      - Passing representations bet service is done using standard text- based formats:
        - JSON
          - for publc-facing or external-facing API
        - gRPC
          - internal serices and performance is priority

    HTTP
      Three parts
        - request line
          - verb
            - get, put, post, delete
          - URIs( uniform resource identifier/endpoint)
          - protocol version
            - http
            - https
        - response header variables
          - metadata about the messages
            - preferred rep formats(JSON/XML)
        - request body(optional)/reqeuest state
          - preferred rep formats(JSON/XML)
          
    APIs design
      https://cloud.google.com/apis/design/
      https://apistylebook.com/design/guidelines/google-api-design-guide

      Google APIs 
        - each google cloud service exposes a REST API
          - functions are in the form:
            service.collection.verb
          - parameters are passed either in the URL or in the request body in JSON format
        - compute engine API has
          - a service endpoint at: https://compute.googleapis.com
          - collections include instances, instanceGroups, instanceTemplates, etc.
          - verbs include insert, list, get, etc.
        - so to see all your instances, make a GET request to:
          https://compute.googleapis.com/compute/v1/projects/{project}/zones/{zone}/instances

      OpenAPI
        - an indusry standard for exposing APIs to clients

        Swagger
          - an opens source tools Open APi w/ tooling, supports designing, building, consuming and documenting APIs

        - Standard interface description format for REST APIs
          - language independent
          - open source based on Swagger

        - Allows tools and humans to understand how to use a service w/o needing its source code

      gRPC
        - developed at google
          - supports many languages
          - easy to implement
        - binary protocol that is useful for internal microservice communication
        - a lightweight protocol for fast, binary communication between services or devices
        - supported by google services:
          - global load balancer(HTTP/2)
          - cloud endpoints
          - can expose gRPC services using an ENvoy Proxy in GKE

      Google CLoud managing APIs Tools:
        - provide tools for:
          - user authentication
          - monitoring
          - securing APIs
        - support openAPIa nd gRPC
          
        1. Cloud Endpoints
          - API mngmt gateway which help you develop, deploy and manage APIs on any google cloud backend
        2. Apigee API Platform
          - API mngmt platform built for enterprises w deployment options for cloud/on-premise/hybrid
        3. API Gateway
          - feature of Apigee
          - a customizable portal for onboarding partners and developers, monetization and depp analytics around APIs
          - provide secure access to your backend services through a well defined REST API that is consistent across all of your services regardless of service implementation
          

    Activity 5: Designing REST APIs
      - design APIs for your case study microservices

      Format
        Service name
          product
       
        collection
          inventory

        Method
          add
          get
          update
          delete
          search

      Sample(online travel portal)
        Service name
          1. search
          2. inventory
          3. analytics
          4. order processing
        collection
          1. trips(flights + hotel combination)
          2. items(flights + hotels)
          3. sales
          4. orders
        Method
          1. find
            save
          2. add
            search
            get
            remove
          3. analyze
            get
            list
          4. add
            get
            list
            update

    Quiz
      1. You’re building a RESTful microservice. Which would be a valid data format for returning data to the client?
        - JSON, HTML, XML
          - text-based format and can be set content-type
      2. You’re writing a service, and you need to handle a client sending you invalid data in the request. What should you return from the service?
        - A 400 error code
      3. Which below would violate12-factor app best practices?
        - Store configuration information in your source repository for easy versioning.
      4. You’ve re-architected a monolithic web application so state is not stored in memory on 
      the web servers, but in a database instead. This has caused slow performance when retrieving user sessions though. 
      What might be the best way to fix this?
        - Use a caching service like Memorystore for Redis.


DevOps Automation
  - This module introduces DevOps automation, a key factor in achieving consistency, reliability, and speed of deployment.

  Learning Objectives
    1. Discuss the automation of service deployment using CI/CD pipelines.
    2. Explain how to leverage Cloud Source Repositories for source and version control.
    3. Automate builds with Cloud Build and build triggers.
    4. Manage container images with Container Registry.

  Continuous Integration Pipelines
    - automate building applications

    Flow/Process
      Developers check-in code: Use git repo for each microservice and branches for versions
        -> Run unit tests: if the tests don't pass, stop
          -> Build deployment: create a docker image
              -> Deploy: Save your new Docker image in an artifact registry

    Google Cloud CI pipeline
      Cloud Source Repo -> Cloud Build -> Build triggers -> Artifact Registry
      
      Cloud build
        - build software quickly across all languages
        - google hosted docker build service called cloud builder
          - alternative to using docker build command
        - import source code from git repo -> exec build docker image -> produce docker container stored in artifacts

        How:
          - write build config to provide instructions to cloud build on what tasks to perform
          - CLI:
            gcloud builds submit --tag gcr.io/your-project-id/image-name

      Cloud Build triggers
        - like github actions
        - automatically starts build whenever you make any changes to your source code in your git repo
  
      Artifact Registry
        - a universal package manager for build artifacts and dependencies
        - single place to manage docker images/deployment packages, perform vulnerability analysis, and access control
        - can store docker and OCI container images in a docker repo
        - images built using cloud build are automatically saved in artifact registry
          - tag images w/ prefix docker tag SOURCE-IMAGE LOCATION-docker.pkg.dev/PROJECT-ID/REPOSITORY/IMAGE:tag
        - can use docker push and pull commands w/ artifact registry
          - docker push LOCATION-docker.pkg.dev/PROJECT-ID/REPOSITORY/IMAGE:tag
          - docker pull LOCATION-docker.pkg.dev/PROJECT-ID/REPOSITORY/IMAGE:TAG

        Binary authorization
          - allows you to enforce deploying only trusted containers into GKE
          - a google cloud service and is based on the kritis specification

          how
            - enable binary authorization on GKE cluster
            - add a policy that requires signed images

          - when an image is built by cloud build an "attestor" verifies that it was
          from a trusted repository
          - artifact registry includes a vulnerability scanner that scans containers

  Why cloud?
    - no more capex but monthly expendatures w/ pay per use
    - don't fix broken machines
    - don't install patches
    - don't upgrade machines
    - if you need to fix machine, delete it and recreate a new one
    - to make infra disposable, automate everything w/ code:
      - can automate using scripts
      - can use declartive tools to define infra

  Infrastructure as Code
    - allows quick provisioning and removing infra
    - build infra when needed
    - destroy infra when not in use
    - create identical infra for dev, test and prod
    - can be part of CI/CD pipeline
    - templates are building blocks for DR procedures
    - manage resource dependencies and complexity
    - google cloud supports many IAC tools
      - terraform
      - chef
      - ansible
      - puppet
      - packer

    Terraform
      - repeatable deployment process
      - declarative language
      - focus on the app
      - parallel deployment
      - template-driven

    Terraform language
      - HCL
      - interface to declare resources
      - sntax includes block that represent objects and can have zero or more labels
        - block has a body that enables one to declare arguments and nested blocks
          - arguments are used to assign value to name and expressions
            - used to assign values to various identifiers

  Qwiklabs: Building a DevOps Pipelines
    https://googlecoursera.qwiklabs.com/focuses/34929270?parent=lti_session
    
    Overview
    In this lab, you will build a continuous integration pipeline using Cloud Source Repositories, Cloud Build, build triggers, and Artifact Registry.

    Objectives
    In this lab, you will learn how to perform the following tasks:

      1. Create a Git repository
      2. Create a simple Python application
      3. Test Your web application in Cloud Shell
      4. Define a Docker build
      5. Manage Docker images with Cloud Build and Artifact Registry
      6. Automate builds with triggers
      7. Test your build changes

    //clone the gcloud source repos clone devops-repoe empty repository from cloud source repository
      gcloud source repos clone devops-repo
    
    //create an Artifact Registry repository named devops-repo:
      gcloud artifacts repositories create devops-repo \
  --repository-format=docker \
  --location=us-west1

    //To configure Docker to authenticate to the Artifact Registry Docker repository, enter the following command:
      gcloud auth configure-docker us-west1-docker.pkg.dev

    //To use Cloud Build to create the image and store it in Artifact Registry, type the following command:
      gcloud builds submit --tag us-west1-docker.pkg.dev/$DEVSHELL_PROJECT_ID/devops-repo/devops-image:v0.1 .

    //Automate builds w/ triggers
      Create trigger and specify the following:
        Property	    Value
        Name	        devops-trigger
        Repository	  devops-repo(Cloud Source Repositories)
        Branch	      .*(any branch)
        Configuration	 Dockerfile
        Image name	   Lab Region-docker.pkg.dev/insert-your-project-id-here/devops-repo/devops-image:$COMMIT_SHA (change the project ID where indicated)

  Quiz
    1. What Google Cloud feature would be easiest to use to automate a build in response to code being checked into your source code repository?
      - buil triggers
    2. Which Google Cloud tools can be used to build a continuous integration pipeline?
      - cloud source repositories
      - cloud build
      - artifact registry

Choosing Storage solutions
  - discuss Google Cloud storage and data solutions and how to select the most suitable one 
  to meet your business and technical requirements.
 
  Learning Objectives
    1. Identify the use cases for Spanner
    2. Identify the use cases for Cloud SQL
    3. Identify the use cases for Firestore
    4. Identify the use cases for Memorystore
    5. choose appropriate GC data storage service based on use case, durability, availability, scalability and cost
    6. store binary data w/ cloud storage
    7. store relation data using Cloud SQL and Spanner
    8. store nosql data using firestore and cloud bigtable
    9. cache data for fast access using Memorystore
    10. aggregate data for queries and repost using bigquery as a data warehouse


  Key Storage Characteristics

    relational DB
      - cloud SQL
      - cloud spanner
      - alloyDB

    nosql
      - firestore
      - cloud bigtable

    File strorage
      - filestore

    Object storage
      - GCS
    block storage
      - persistent disk

    warehouse
      - bigquery

    in memory
      - memorystore

    Availability SLA
      GCS
        multiple region
          99.95
        single reg
          99.9
        coldline
          99
      Spanner
        multiple region
          99.999
        single reg
      Firestore
        multiple region
          99.999
        single region
          99.99
    monthly uptime percerntage
      = (Total month in min - Downtime month in minutes) divided by Month total minutes
    
    durability
      - represents the odds of losing data
      - preventing data loss is a shared responsibility

      How?
        Cloud Storage
          - 11 9'S
          - turn versioning on(you)

        Disks
          schedule snapshot jobs(you)

        Cloud SQL
          - automated machine backups, point in time recovery and failover server
          - run SQL DB backups(you)

        Spanner
          - automatic replication
          - run export jobs(you)

        Firestore
          - automatic replication
          - run export jobs(you)

    Amt of data and number of reads and writes
      - service scale horizontally by adding nodes
        - bigtable
        - Spanner
      - service scale vertically by making machines larger
        - cloud sql
        - Memorystore
      - services scale automatically w/ no limits
        - GCS
        - bigquery
        - firstore

    Do you need strong consistency?
      - strongly consistend DB update all copies of data w/in a transaction
        - ensures everyone gets the latest copy of the data on reads
          - storage
          - cloud sql
          - Spanner
          - firestore
      - eventually consistent DB update one copy of the data and the rest asynchronously
        - can handle a large volume of writes
          - bigtable
          - memorystore replicas

    Calculate the total cost per GB when choosing a storage service
      - bigtable and spanner would be too expensive for storing smaller amounts of data
      - firestore is less expensive per GB, but you also pay for reads and writes
      - cloud storage is relatively cheap, but you can't run DB in storage
      - bigquery storage is relatively cheap, but doesn't provide fast access and records and you have to pay for running queries
    
    Activity 6: Defining storage characteristics
      - determine storage characteristics for each of your case-study services

      Sample: (online travel portal)
        Account service
          structured
            SQL
              Strong
                GB size
                  Read/write
        
        inventory
          structured
            noSQL
              Strong
                GB size
                  Read/write
        
        inventory uploads
          uistructured
            n/a
              n/a
                GB size
                  Read only

        orders
          structured
            SQL
              Strong
                TB size
                  Read/write
        Analytics
          structured
            SQL
              Eventual
                TB size
                  Read only

    Choosing Google Cloud Storage and Data Solution
      Portfolio

      Decision characteristics

      latency

      for smaller or scheduled data uploads use Cloud Storage transfer service
        import online data to cloud storage
          S3
          http/https location
          transfer between Cloud storage buckets

        scheduled jobs
          - one time or recurring, import at a scheduled time of day
          - options for delete objects not in source or after transfer
          - filter on file name, creation date

      use the storage transfer service for on-premises data for large-scale uploads from your data center
        - install on-premise agent ony our servers
        - agent runs in a docker container
        - setup conn to google cloud
        - req a minimum of 300 Mbps BW
        - scales to billions of files and 100s of TBs
        - secure
        - automatic retires
        - logged
        - easy to monitor via the google cloud console
    
     Use Transfer Appliance for large amt of data
      - rackable device upto 1PB shipped to Google
      - use Transfer Appliance if uploading your data would take too long

      Secure:
        - you control the encryption key
        - google securely erases the appliance after use

      Steps
        1. Request transfer appliance
        2. encrypt and copy your data
        3. ship it back to google
        4. google loads the data
        5. you decrypt your data

    Activity 7: Choosing GCS and data services  
      - choose the storage services for each of your case-study services

      Sample
        accoutn service
          - cloud SQL
        inventory
          - firestore
        inventory uploads
          - cloud storage
        orders
          - cloud SQL
        analytics
          - bigquery

    Quiz
      1. Currently, you are using Firestore to store information about products, reviews, and user sessions. You'd like to speed up data access in a simple, cost-effective way. What would you recommend?
        - Cache the data using Memorystore.
          - 
      2. You want to analyze sales trends. To help achieve this, you want to combine data from your on-premises Oracle database with Google Analytics data and your web server logs. Where might you store the data so it is both easy to query and cost-effective?
        - BigQuery
          - provides infra to ingest data from many different sources

      3. You are a global financial services company with users all over the world. You need a database service that can provide low latency worldwide with strong consistency. Which service might you choose?
        - Spanner

      4. You need to store user preferences, product information, and reviews for a website you are building. There won't be a huge amount of data. What would be a simple, cost-effective, managed solution?
        - Firestore

Google Cloud and Hybrid network Architecture
  - discuss Google Cloud network architectures, including hybrid architectures.

  Learning Objectives
    1. Discuss the design of VPC networks to optimize for cost, security, and performance.
    2. Describe/configure how global and regional load balancers provide access to services.
    3. Leverage Cloud CDN to provide lower latency and decrease network egress
    4. evaluate network architecture using network intelligence center
    5. Connect networks using peering, VPNS and Cloud Interconect
    6. Define hybrid networks between Google Cloud and on-premises data centers using Cloud Interconnect.
  
  Designing Google Cloud Networks
    Points of presence(PoPs)
      - where google network is connected to the rest of the internet

    VPC networks 
      - global
    
      Subnet
        - regional

        custom subnets
          - ip add cannot overlap
          - same vpc network can comm via internal IP regardless of subnet region
          - subnets don't need to be derived from a single CIDR block
          - subnets are expandable w/o down time
          - ip aliasing or secondary rance can be set on the subnet

    Shared VPC
      - created in one project but can be shared and used by other projects
      - requires an organization
        - create the VPC in the host project
        - shared VPC admin shares the VPC w/ other service projects
      - allows centralized control over network configuration
        - network admins configure subnets, firewall rules, routes, etc
        - remove network admin rights from developers
        - developers focus on machine creation and configuration in the shared network
        - disable the creation of the default network using an organizational policy
    Tips
      - design your networks based on location, number of users, scalability, fault tolerance and other service requirements
      - if global company choose regions around the world
      - if users are close together, choose region closest to them plus a backup region
      - a project can have multiple network
      - a single VM can have multiple network interfaces connected to diff networks
        - each network must have a subnet in the same region the VM is created in
        - each interface must be attached to different VPC
        - max of 8 interfaces per VM
          - more vCPUs, more network interfaces are possible
      - use shared VPC  for multi project networking to connect each instance in diff proj securely.
    
    Designing Google Cloud Load balancers
      Types
        1. Global: frontend for globally distributed users using single anycast IP addr
          - global external http(s) LB
          - external Http(s) LB(classic)
          - external SSL proxy LB
          - external TCP proxy LB
        2. Regional
          - regional external HTTP(S) LB
          - internal HTTP(s) LB
          - internal TCP proxy LB
          - Internal TCP/UDP LB
          - External TCP/UDP Network LB
          - External Regional TCP Proxy LB
      
      Note
        - internal LB
          - andromeda software
        - network LB
          - maglev software
      
      Tips:
        - use Cloud CDN for lower latency and decreased egress cost
          -cache in cloud edge caching locations

      Decision tree
        - application LB
          - HTTP traffic
        - proxy network LB
          - TLS offload, TCP proxy, support external LB to backends in multiple regions
        - passthrough netwokr LB
          - preserve client source IP add
          - avoutd overhead proxies
          - support add protocols like UDP, ESP, and ICMP
        - UDP
          - expose client IP addr to your app

      Network Intelligence center
        - can be used to visualize VPC network topology and test network connectivity

    Activity 8: Defining network characteristics
      - specify network characteristics for your case study VPC
      - choose the type of LB required for each service

      Sample
        account service
          internal only
            tcp
              not multiregional
                so TCP LB
        search
          internet facing  
            http
             multi-regional
              so HTTP LB

        inventory
          internal 
            tcp
             not multi-regional
              so TCP LB

        analytics
          internet facing  
            http
             not multi-regional
              so HTTP LB

        web ui
          internet facing  
            http
             multi-regional
              so HTTP LB

        orders
          internal  
            tcp
              not multi-regional
                so TCP LB

  Connecting Networks
    Activity 9: Diagramming your network

  
  Quiz: Google Cloud and Hybrid network Architecture
    1. You want a secure, private connection between your network and a Google Cloud network. There is not a lot of volume, but the connection needs to be extremely reliable. Which configuration below would you choose? 
      - VPN with high availability and Cloud Router.
        - cost effective thatn Cloud interconnect cuz not a lot of volume
        - VPN with Ipsec for private secure conn
        - HA for reliability

    2. You have a contract with a service provider to manage your Google VPC networks. You want to connect a network they own to your VPC. Both networks are in Google Cloud. Which Connection option should you choose?
      - VPC peering
        - both network in google cloud that's why vpc peering allows connets across two vpc networks whether they belong to same project/org
    
    3. You are a large bank deploying an online banking service to Google Cloud. The service needs high volume access to mainframe data on-premises. Which connectivity option would likely be most suitable?
      - Cloud Interconnect
        - provides high BW and lpw latency. it doesn't need encryption at the app layer

    4. You are deploying a large-scale web application with users all over the world and a lot of static content. Which load balancer configuration would likely be the most suitable?
      - HTTP load balancer with SSL configured and the CDN enabled.
    


Deploying Applications to Google Cloud
  -  this module, we discuss the different options of deploying applications to Google Cloud. Google Cloud offers many possible deployment platforms, and the choice is not always immediately obvious.

  Learning Objectives
    - Choose the appropriate Google Cloud deployment service for your applications.
    - Configure scalable, resilient infrastructure using Instance Templates and Groups.
    - Orchestrate microservice deployments using Kubernetes and GKE.
    - Leverage App Engine for a completely automated platform as a service (PaaS)

  Google Cloud Infrastructure as a service

  Google Cloud Deployment platforms

  Lab and review:
  
    Qwiklab: Deploying Apps to Google Cloud
      https://googlecoursera.qwiklabs.com/focuses/34983825?parent=lti_session
      - deploy applications to the Google Cloud services App Engine, Kubernetes Engine, and Cloud Run.

      Objectives
      In this lab, you will learn how to perform the following tasks:

        - Download a sample app from GitHub
        - Deploy to App Engine
        - Deploy to Kubernetes Engine
        - Deploy to Cloud Run

      Deploy App Engine
        //Create app engine app
          gcloud app create --region=us-west1

        //deploy your app
          gcloud app deploy --version=one --quiet

        //deploy secon version after modifying main.py
          gcloud app deploy --version=two --no-promote --quiet

          //--no-promote parameter tells App Engine to continue serving requests with the old version. 
          This allows you to test the new version before putting it into production.

      Deploy to Kubernetes Engine
        Kubernetes Engine
          allows you to create a cluster of machines and deploy any number of applications to it. Kubernetes abstracts the details of managing machines and allows you to automate the deployment of your applications with simple CLI commands

        //test your connection
          kubectl get nodes

        kubernetes-config.yaml sample
          https://googlecoursera.qwiklabs.com/focuses/34983825?parent=lti_session

          Note: 
            In the first section of the YAML file above, you are configuring a deployment. In this case, you are deploying 3 instances of your Python web app. 
            Notice the image attribute. You will update this value with your image in a minute after you build it. 
            In the second section, you are configuring a service of the type "load balancer". The load balancer will have a public IP address. 
            Users will access your application through the load balancer.
        
        //create an Artifact Registry repository named devops-demo
          gcloud artifacts repositories create devops-demo \
  --repository-format=docker \
  --location=us-west1

        //configure Docker to authenticate to the Artifact Registry Docker repository
          gcloud auth configure-docker us-west1-docker.pkg.dev

        //you need to build a Docker image
          cd ~/gcp-course/training-data-analyst/courses/design-process/deploying-apps-to-gcp
          gcloud builds submit --tag us-west1-docker.pkg.dev/$DEVSHELL_PROJECT_ID/devops-demo/devops-image:v0.2 .

        //Image name
          us-west1-docker.pkg.dev/qwiklabs-gcp-00-08f264cdc96d/devops-demo/devops-image:v0.2
        
        //Paste it to kubernetes-config.yaml
          spec:
            containers:
            - name: devops-demo
              image: us-west1-docker.pkg.dev/qwiklabs-gcp-00-08f264cdc96d/devops-demo/devops-image:v0.2
              ports:

        //connect to kubectl instances
          https://console.cloud.google.com/kubernetes/clusters/details/us-west1/autopilot-cluster-1/details?project=qwiklabs-gcp-00-08f264cdc96d

        // check if connected
          kubectl get nodes

        //deploy your application in kubernetes
          kubectl apply -f kubernetes-config.yaml

        //confirm if three replicas of the app have been created
          kubectl get pods

        //confirm if load balancer is also created
          kubectl get services
        
Design Reliable systems
  - we talk about how to design reliable systems.

  Learning Objectives
    - Discuss the design of services to meet requirements for availability, durability, and scalability.
    - Identify the failures to be avoided to implement a fault-tolerant system.

  Key Performance Metrics

  Designing for Reliability

    Activity: Designing Reliable Scalable Applications

  Disaster planning
    Activity: Disaster planning

Security
  - in this module, we cover security. Google has been operating securely in the cloud for 20 years. There is a strong belief that security empowers innovation. The approach of the cloud architect should be that security should be put first; everything else will follow from this.

  Learning Objectives
    - Identify the best practices for designing secure systems.
    - Discuss the use of organizational policies and folders to simplify cloud governance.
    - Identify Google Cloud services that can be leveraged for access management.
    - Identify Google Cloud services that can be leveraged to mitigate DDoS attacks.

  Security Concepts

  Securing People and Machine access
    Securing People

    Securing Machine access

  Network Securit and Encryption
    Network Security

    Encryption

    Activity: Modeling secure google cloud services

  Review

Maintenance and monitoring
  - application maintenance and monitoring.

  Learning Objectives
    - Discuss different ways to manage new service versions.
    - Describe how to forecast, monitor, and optimize service costs.
    - Observe whether your services are meeting their SLOs using Cloud Monitoring and Dashboards.
    - Use Uptime Checks to determine service availability.
    - Respond to service outages using Cloud Monitoring Alerts.

  Managing Versions and Cost planning
    Managing Versions

    Cost planning

  Monitoring Dashboards

    Activity: cost estimating and planning
    
  Lab and Review
    
    Qwiklab: Monitoring Applications in Google Cloud
      https://googlecoursera.qwiklabs.com/focuses/35006172?parent=lti_session
      - In this lab, you will deploy an application to Google Cloud and then use the tools provided by Google Cloud to monitor it. You will use Cloud Logging, Trace, Profiler, and dashboards and create uptime checks and alerting policies.

      Objectives
      In this lab, you will learn how to perform the following tasks:

        1. Download a sample app from Github
        2. Deploy an application to App Engine
        3. Examine the Cloud logs
        4. View Profiler information
        5. Explore Cloud Trace
        6. Monitor resources using dashboards
        7. Create uptime checks and alerts

      //Turn profiler on
      //main.py
        try:
          googlecloudprofiler.start(verbose=3)
      except (ValueError, NotImplementedError) 
      as exc:
          print(exc)

      //requirements.txt
        google-cloud-profiler==3.0.6
        protobuf==3.20.1

      //enable cloud profiler API 
        gcloud services enable cloudprofiler.googleapis.com

      //View Profiler information
        The gray bar at the top represents the total amount of CPU time used by the program. 
        The bars below represent the amount of CPU time used by the program's functions relative 
        to the total. At this point, there is no traffic, so the chart is not very interesting. 
        Throw some load at the application.

      //web testing tool called apache bench
        sudo apt update
        sudo apt install apache2-utils -y

      //generate some traffic to your App Engine application:
        ab -n 1000 -c 10 https://qwiklabs-gcp-03-d95cfb2e5f5c.uk.r.appspot.com/

      //cloud Trace
        The chart in the upper-left plots requests and how long they took. 
        The table to the right shows a list of requests. 
        If you select a request, more detail will be displayed at the bottom of the screen.