Google Cloud Fundamentals: Core Infrastructure


Learning objectives
	1. Identify the purpose and value of Google Cloud products and services
	2. Define how infrastructure is organized and controlled in Google Cloud
	3. Explain how to create a basic infrastructure in google Cloud
	4. Select and use Google Cloud storage options
	5. Describe the purpose and value of Google Kubernetes Engine
	6. Identify the use cases for serverless Google Cloud services
	

Week 1 Course Introduction

Learning Objectives
	1. Welcome learners to the course.

Week 2 Introducing Google Cloud

Learning objectives
	1. Identify the benefits of Google Cloud.
	2. Define the components of the Google network infrastructure, including points of presence, data centers, regions, and zones.
	3. Identify the difference between infrastructure as a service (IaaS) and platform as a service (PaaS).

Cloud Computing Overview
	- way of using IT that has 5 equal important traits
		1. On demand and self service
		2. Access those resources from anywhere over the internet
		3. Provider allocates resources to users out of the pool
		4. Resources are elastic means flexible
		5. Pay what you use/reserver as they go

Why in demand nowadays?
	History
		First wave
			colocation
				- users rents physical space of the DC provider without investing own data center
		
		Second wave
			virtualized data center
				- uses virtual devices, match physical building blocks(CPUs, Disks, network) of hosted computing resources
				- enterprieses still maintain infra and user controleed/user-config env
				- not fast enough cuz not automated

		Third wave
			Container-based architecture
				- fully automated elastic(auto scale) means automated service and scalable data
				- auto provision and config infra used to run app

		Future wave
			Data Company
				- great software based on high quality data


IaaS and PaaS
	IaaS
	 	- cloud manage:
	 		raw compute/server/virtualization
	 		storage
	 		newtork
	 	- you:
	 		app
	 		data
	 		runtime
	 		middleware
	 		OS

	 	Sample
	 		Compute Enigine

	PaaS
		- cloud manage:
	 		everything
	 	- you:
	 		app
	 		data
	 	Sample
	 		App engine

	 Serverless/Function as a service
	 	AWS/GCP run containers for you based on CPU/RAM you need
	 	you don't manage/provision servers so you can concentrate on code
	 	lambda/cloud function
	 		even-drivent driven code
	 			pay as you go
	 	cloud run/ECS-Fargate

	 SaaS
	 	- cloud manage all
	 	app run in the cloud as a service
	 	Sample
	 		gmail
	 		docs
	 		drive

The Google Cloud network
	Region(40)/AWS Region(33)
		singapore

	Zone(121)/Availability-zone(105)
		asia-souteast1a-c

	Network Edge locations(187)/Edge Locations(400)

	Sample
		Multi region archi sample
		Cloud Spanbner/aurora

Environment Impact
	ISO 14001
	carbon neutral/carbon free

Security
	Hardware infra layer
		own design  chips/own network hardware design
		Secure boot stack
			ensures correct booting correct software stack
				crypto sign over BIOS
					bridge bet OS and hardware during startup process
					startup guide
				bootloader
					manage flow bet software and  hardware during starup process
					traffic cop
				kernel
					boss
					core component of OSmake sures sys resources, comm bet  hardware and software, and process runs smoothly
				OS of image

		Premises security

	Service deployment layer
		Encryption of inter-service communication
			provides crypto privacya nd remote procedure call(RPC) data on network

			RPC
				used when one comp talks to other comp over internet
				protocol use to enable program to exec code of another computer
				remote control

	User Identity layer
		User Identity
			google central identity service utilizes U2F

	Storage services layer
		Encyption at rest
			centrally managed keys
			SSD/hard drives
				support hardware encryption

	Internet Communication layer
		Google front end
			support perfect forward secrecy
				uses one time only session key
			support TLS uses public private key pair
			uses X.509 cert from CA

		DoS protection with cloud armor in Global external LB

	Operational security layer
		Intrusion detection
			ueses machine intel
			test penetration with red team exercises
		Reducing insider risk
			continuous limit employee access and montiors them
		Employee universal second factor(U2F) use
			U2F
				2 factor authentication like MFA
				prevents phishing attacks
		Software development practices
			practices
				central souce control
				two party cid review
				lib that prevent code class security bugs
				runs vulnerability rewards programs
					pay anyone who can discover nugs in the infra

Open source ecosystems
	can collaborate with many open sources like kb8, mongodb, tensorflow

	TensorFow
		open source library for ML

	Operations suits
		can monitor workloads across multiple cloud providers

Pricing and billing
	kb8s
		per seconnd billing

	Instance run more than 25% of a ,onth
		discount for every incremental min use fot that inca

		POnline pricing calculator

	Cloud Billing is AWS budget
		can create alert with budget limit met
		can be set with 50,90,100

	Cloud quotas
		 manage qoutas fir each cloud services
		 prevent sover consumption of resource

		Rate quotas
			project level

		Allocation qoutas
			project leve


Quiz
1. What is the primary benefit to a Google Cloud customer of using resources in several zones within a region?
	- For improved fault tolerance/availability

2.What type of cloud computing service lets you bind your application code to libraries that give access to the infrastructure your application needs?
	- PaaS(cloud run/build/app engine)

3.Why might a Google Cloud customer use resources in several regions around the world?
	- To bring their applications closer to users around the world, and for improved fault tolerance


Week 3 Resources and Access in the cloud

Learning Objectives
	1. Define the purpose of and use cases for IAM.
	2. List the methods of interaction with Google Cloud.
	3. Use Cloud Marketplace to interact with Google Cloud.
	4. Identify the purpose of projects on Google Cloud.

Google CLoud resource hierachy
	- directly relates to how policies are managed and applioed when you google cloud
	- policies are inherited downward
	- policies defined in
		org node
		folder
		project
Four level hierarchy
	1. resources
		VM in GCE
		buckets in GCS
		tables in bigquery

	2. Projects
		org in folders or subfolders
		policy here can enbale and use 
			services, 
			api, 
			billing, 
			add/rmeove collaborator
		can have diff owners and users
			billed and managed serpately

		attributes
			project id
				globally unique and can't be changed
				immutable
					used by google of exact project to work with
			proj name
				user created
				can be changed anythime
			proj number
				unique proj number 
				used by google to keep track resources

	3. Folders
		- allows can be used to group different department
		give team allow delgate admin rights for wokring independelty

	4. Org node that encompasses all three above

Cloud resource manager
	manage projets
	API that can gather list of all projects associateds with an an coount
	create new proj
	update exist project
	delete projects
	can recover deleted prokects
	- can be access through RPC and REST API

Project creator role
	conrol who can create projects means who can spend money

Workspace domain/org node
	projects will belong to this domain

Creating org node
	workspace domain
	cloud identity
	google identity
	acceess
	application
	endpoint mngmt platform

Identity and Access Management(IAM)
	power to restrict authorizations/access

	IAM policy
		set by admin
		a set of rules who can access resources
		
		who
			account
			group
			service account
			cloud identity domain
			- principal
				email add
		can do whaat
			role
				contains permissions
				
				Three kinds 
					1. basic
						affect all resources in the project

						proj viewer
							can accesss without edit
						prok owner
							can access and edit
							can manage broles and permission and set up billing
						proj editor
							can access and edit
						proj bill admin
							contorl billing of project and change resource in project
					2. predefined
						like instanceAdmin in GCE
					3. custom
						assign role that has specific permission
						can only be applied to project or org level
			why
				easier to mange

		principle
			zero trust security or least privilege permission


Service accounts
	-non human account withou human login that can access resources on behalf of syst/app

	Use case
		want only GCE VM to access cloud storage


Cloud Identity
	centrally managed users account like disabling them/removing from the group access to team's resources with google admin console

	- already abailbe to google workspace customer

	Active Director/LDAP(lightweight dir access protocol) sys
		a phone book that track who's who and their access bet computers and apps over a network


Interacting with Google Cloud
Four ways to access resources
	1. Google cloud console/web browser
	2. Cloud SDK and CLoud Shell
		Cloud SDK
			cli in local machine
			 like gcloud and bq/bigquery
			- can manage google cloud resources
		Cloud Shell
			ClI in cloud console
			5 gb home dir
			debian VM
			cloud sdk gcloud pre installed
	3. APis
		allow code to be written to conrol services
		GOogle APis explorer
			shows what APis available in a resources
	4. Google Cloud app
		provides up to date bill info and alerts if budget is met
		can setup costom graphs of cpu, network/request per sercond

Coursera: Getting started with Google cloud platform and Qwiklabs
Lab
	Console and Cloud shell

Getting Started with Cloud marketplace
	sudo sh -c 'echo "<?php phpinfo(); ?>" > apache2/htdocs/phpinfo.php'

Quiz
1. Choose the correct completion: Services and APIs are enabled on a per-__________ basis.
- projects

2. Order these IAM role types from broadest to finest-grained.
- Basic roles, predefined roles, custom roles

3. Which of these values is globally unique, permanent, and unchangeable, but can be modified by the customer during creation?
- The project ID


Week 4 Virtual Machines and Networks in the Cloud

Learning Objectives
	1. Deploy a basic infrastructure to Google Cloud.
	2. Explore how Cloud Load Balancing functions in Google Cloud.
	3. Detail important VPC compatibilities including routing tables, firewalls and VPC peering.
	4. Identify the purpose of and use cases for Google Compute Engine.
	5. Explore the basics of networking in Google Cloud.
	6. Outline how Google Compute Engine can scale.


VPC Networking
	- secure indiv private cloud compute model hosted within public cloud
	- connect google cloud resources to internet
	- segment networks

	Main goal
		DR

Compute Engine
	- config like physical server
	- billed by second with one minute minimum
	- discound by the longer they run minimum of 25% of a month, discount every add minute

	Predetermine workloads/stable
		upto 57% discount
		min contract of 1 year or 3 years

	premptible/spot VM
		90% price
		okay for VM to be terminated
		use case
			finish batch job analysizng large data set


Scaling virtual Machines
	scale out
		horizontal scaling

	sacle up
		vertical scaling

	machine type

Important VPC compatibilities
	Firewall defined through tag
		is VM level
		Security group(VM level) and NACL(subnet level) in AWS

	VPC peering
		comm two VPC

	Shared VPC
		where you can configure who and what in one project to interact with other VPC


Cloud Load Balancing
Types
	1. Global HTTP(S)
		- cross regional load balancing web app

	2. Global SSL pRoxy
		secure socket layer traffic

	3. Global TCP proxy
		TCP wiht no SSL

	4. Regional External passthorugh netwokr load balancer	
		UDP traffic or taffic on any  port number across region

	5. Regional internal load balancer (proxy network LB/ Pasthrough network LB and Application load balancer)
		Load balance inside  bet presentation and busines layer of app

	6.Cross-region internal load balancer
		- layer 7 load balancer  traffic to backend services


Cloud DNS and CDN
	Cloud DNS
		- set url name like AWS route 53 

	Edge caching(Cloud CDN)/Edge locations in AWS

	- can be enable with External LB service

Connecting networks to Google VPC
Ways to  conenc on premise to Google cloud
	1 . Cloud VPN/ AWS VPN
		- a tunnel connection between on-premise or AWS/Azure network to GCP VPC securely over internet using 
		 	- IPsec
		 	- cloud router 
				uses border gateway protocol to exchange route information over VPN

		Limitation
			- Security concerns
			- BW reliability

	2. Peering
		- putting router in the same public data center/colocation Data center as a google PoP adn not on public internet
			Point of Presence(PoP)
				- loc where different networks can connect and share data on internet service provider infra
					- reduces latency to google cloud services and resources
		
		2.1 Direct Peering
			When to use
				- connect on premise network to google cloud network

		2.2 Carrier Peering
			When to use
				- customer not covers in google PoP connect through GCP with partner ISP

		Limitation
			- Not covered by Google Service Level Agreement
		
	3. Dedicated Interconnect
		- allows for one or more direc, private connections to google
		- if met with google specs, SLA upto 99.99%
		- connection backed up by VPN
		
		When to use
			- getting highest uptimes for interconnection
		
	4. Partner Interconnect
		- provides connectivity between onprimes and VPC network through supported ISP
		When to use
			- on premise DC can't connect to colocation DC
			- dat dont neet an entire 10 GB per second conenction
			- support critical services or app that can tolerate downtime
		
	5. Cross Cloud Interconnect
		- establish high BW dedicated connectivity bet google cloud and another cloud service provider
		- available in 10GbpS or 100Gbps

		- Cloud interconnect/AWS Direct connect
			- a private hallway comm between onpremise or google cloud
				- on premise  and google cloud connects through colocation facility using BGP bet Cloud router and onpremise router
		 

Getting started with VPC networking and GCE
Objectives
	- Explore the default VPC network
	- Create an auto mode network with firewall rules
	- Create VM instances using Compute Engine
	- Explore the connectivity for VM instances

Firewall Priority
	- higher number indicates lower priorities

Test network
	ping -c 3 <Enter mynet-eu-vm's internal IP here>
		allow-custom
	ping -c 3 <Enter mynet-eu-vm's external IP here>
		allow-icmp

Which firewall rule allows the ping to mynet-eu-vm's external IP address?
	allow-icmp

Quiz
1. In Google Cloud VPCs, what scope do subnets have?
	- Regional

2. What is the main reason customers choose Preemptible/Spot VMs?
	- To reduce cost

3. For which of these interconnect options is a Service Level Agreement available?
	- Dedicated Interconnect

4. How does Cloud Load Balancing allow you to balance HTTP-based traffic?
	- Across multiple Compute Engine regions.


Week 5 Storage in the Cloud

Learning Objectives	
	1. Deploy an application that uses Cloud SQL and Cloud Storage
	2. Distinguish between Google Cloud's Database storage options
	3. Distinguish between Cloud Storage Classes
	4. Identify the purpose of and use cases for Cloud Storage

Google Cloud storage options:

1.Cloud Storage/S3 contains
	 - Object Storage/Bucjets
	 	- manage data as an objects/binary form and not file storage or block/disk storage

	 - metadata
	 	- global unique ID
	 	- date created, author, resource type and permission
	 	- all unique keys in the form of URLs

	 Retrieval
	 	- URL via direct download
	 
	 Note
	 	- Storage objects are  immutable
	 	- select end user nearest location for minimize latency 

	 Feautures
	 	- versioning

	 Security best pracitices
	 	- IAM roles
	 	- Access Control lists(ACL)
	 		- who can access and perform an action 
	 			- can be specific to user or group of users
	 		- permission
	 			- what actions can be performed like read and write
	 	- Lifecycle Management policies
	 		- dekete objects older than 365 days

	 Use cases
	 	- Binary large-object(Blob) Storage
	 		- website content
	 		-backup and archiving
	 	- static web hosting
	 	- direct download



Cloud Storage: Storage classes and data transfer
Classes
	1. Standard Storage
		- hot data/frequently access data
		When
			- stored for only brief periods of time
	2. Nearline Storage
		- once a month/infrequetly access data
		When
			- reading/modifying data on onec a month
			- data backups
			- long term multimedia content
			- data archiving
		

	3. Coldline Storage
		- once every 90 days
		- low cost for infrequent access data

	4. Archive Storage
		- once a year
		- cheapest but has higher cost for data access
		- min 465 min storage duration
		Wgen
			- online backup and DR

	5. Auto class/Intelligient Tiering
		- ideal for unknown/changin access patterns

Ways to import
	- cloud sdk
		#list bucket lists
			gcloud storage buckets list 

		#upload file in a bucket
		gsutil cp index.html gs://rayan_bucket-1

		#list files in bucket
		gsutil ls gs://rayan_bucket-1
	- google cloud flatform
		-
Storage Transfer Serices
	- import large amounts of online data into GCS quickly and cost effectively

Transfer Appliance/Snowglobe
	- data migration

Import/export tables to and from 
	- BigQuery
	- Cloud SQL

Others
	- store app engine logs
	- files for backups
	- store VM startup scripts
	- GCE images


2. Cloud SQL
	- Fully managed Relational DB
		- MySQL
		- PostgreSQL
		- SQL Server

	-supports
		- scale up
		- Master Slave auto replication
		- backupos
		- APP Engine
			- Connector/J for Java
			- MySQLdb for Python

3. Cloud Spanner
	- fullu managed Relational DB but better than cloud SQL
		- tens of thjousands reads and writes per second
	- supports
		- scale out/horizontal

4. Firestore
	- noSQL key values
	- supports
		- mobile
		- web
		- server dev
		- caches
		- auto multi region data replication
		- atomic batch operations
		- real transaction support
	- table is collection
		- documents is key value pair
	- charged at
		- each doc read/write/delete
		- doc read per query
		- ingress is free
		- 10GB free network egress per month between US region
		- Per day quota
			- 50,000 deoc reads
			- 20,000 doc deletes
			- 1 GB stored data

5. Cloud Bigtable
	- nosql big data DB

	Who 
		search
		analtyics
		maps
		gmail

	when
		- operation and analytical app 
			- IoT
			- user anlaytics
			- financial data analysis
			- one TB of semi structured/sturctured data

	Can collaborate with
		Batch processes 
			- Hadoop MapReduce
			- Dataflow
			- Spark

Comparing storage options
	Cloud Storage
		Best for
			- Storing immutable blobs larger than 10 MB

		Capacity
			PB
			Max unit size: 5 TB per object

	Cloud SQL
		Best for
			- full SQL support for an online transaction processing sys
			- web frameworks and existing app

		Capacity
			Up to 64 TB

	Spanner
		Best for
			- full SQL support for online transaction processing system
			- hor scaling/scale out

		Capacity
			PB

	Firestore
		Best for
			Massive scaling and predictability together w real time query results and offline query support
		Capacity
			TB
			Max unit size: 1MB per entity

	Cloud Big table
		Best for
			- storing large amt of structured objects
			- not support SQL queries and multi-riow transactions
			- analytical data with heavy read and write events
		Capacity
			Petabytes
			Max unit size: 10MB p/cell, 100 MB p/row

	Big Query
		- On the edge between data storage and data processing

Getting Started with Cloud Storage and Cloud SQL

Objectives
	- Create a Cloud Storage bucket and place an image into it.
	- Create a Cloud SQL instance and configure it.
	- Connect to the Cloud SQL instance from a web server.
	- Use the image in the Cloud Storage bucket on a web page.

GCE Auto start up Script
	apt-get update
	apt-get install apache2 php php-mysql -y
	service apache2 restart

GCS cloud shell
	export LOCATION=ASIA

	//Create bucket
	gcloud storage buckets create -l $LOCATION gs://$DEVSHELL_PROJECT_ID
	//Copt image to bucket
	gcloud storage cp gs://cloud-training/gcpfci/my-excellent-blog.png my-excellent-blog.png
	//Modify ACL to be readably by everyone
	gcloud storage cp gs://cloud-training/gcpfci/my-excellent-blog.png my-excellent-blog.png


qwiklabs-gcp-04-15d48010786c:us-central1:blog-db
34.27.40.243


Sample Web php MySQL connect code
<html>
<head><title>Welcome to my excellent blog</title></head>
<body>
<h1>Welcome to my excellent blog</h1>
<?php
 $dbserver = "CLOUDSQLIP";
$dbuser = "blogdbuser";
$dbpassword = "DBPASSWORD";
// In a production blog, we would not store the MySQL
// password in the document root. Instead, we would store it in a
// configuration file elsewhere on the web server VM instance.

$conn = new mysqli($dbserver, $dbuser, $dbpassword);

if (mysqli_connect_error()) {
        echo ("Database connection failed: " . mysqli_connect_error());
} else {
        echo ("Database connection succeeded.");
}
?>
</body></html>

Quiz
1. What is the correct use case for Cloud Storage?
	- Cloud Storage is well suited to providing durable and highly available object storage.

2. Which database service can scale to higher database sizes?
	- Cloud Spanner


3. Why would a customer consider the Coldline storage class?
	- To save money on storing infrequently accessed data.


Week 6 Containers in the Cloud

Learning Objectives	
	1. Define the concept of a container and identify uses for containers.
	2. Identify the purpose of and use cases for Kubernetes and Google Kubernetes Engine.

Introduction to containers
	- an isolated box around your code and its independencies
	- limited access to its own partition of the fiel sys and hardware
	- quick to start same as a process
	- only need
		- OS kernel 
	- scale like PaaS but flexible as IaaS


Kubernetes
	- open source for managing and scaling containerized applications
		- on many hosts
		- scale them as microservices
		- deployment
		- rollouts
		- roullbacks
	- bootstrapped using google kubernetes engine

	Cluster
		- a set of nodes(compute instatnce) that run containers

	Pod
		- unit that contains containers

Google Kubernetes Engine
	- google hosted managed kubenetes service in the cloud

	Advanced Cluster management feautures include:
		- Google Cloud's load balancing for compute engine instances
		- node pools to designate subsets of nodes within a cluster for additional flexibility
		- automatic scaling of your cluster's node instance count
		- automatic upgrades for your cluster's node software
		- node auto-repair to maintain node health and availability
		- logging and monitoring with Google Cloud's operation suite for visibility into your cluster.

//Start up kubernete on a cluster in GKE
	gcloud contsainer clusters create k1

Quiz
1. What is a Kubernetes pod?
	- A group of containers
		- containers in a pod are deployed/replicated as a group/together
2. Where do the resources used to build Google Kubernetes Engine clusters come from?
	- Compute Engine


Week 7 Applications in the Cloud

Learning Objectives	
	1. Describe how Cloud Functions can support application development on Google Cloud.
	2. Identify the purpose and use cases for Cloud Run.
	3. Deploy a containerized application on Cloud Run.

Cloud Run
	- a serverless PaaS that runs stateless conatiners via web req or Hub sub events
	- Built on Knative
	- auto scale out and up

	Ways/Deploy through
		1. Source based workflows
			- deploy through source code
				- builpacks
					- an open source that builds image from source code
		2. Container-based workflow
			- deploy through docker image

	Pricing
		1. handling req
			- add fee per 1 million requests
		2. startup
		3. shutdown

	Limitation
		- only available for linux amd/64 and arm/64
			- only in GKE can you deploy arm/64 

Development in the Cloud

Cloud Function
	- a serverless/function as servuce that is event-driven.
		- serverkless means no servers but you just don't worry to manage/provision them, GCP manage them.

	Deploy through
		1, Source code

	Trigger
		1. Cloud Storage
			- async exec
		2. PubSub
			- async exec
		3. HTTP invocation
			- sync exec
	
	Usecases
		1. Convert format
		2. Convert thumbnail size
		3. Store new files

Hello Cloud Run
Qwiklabs
	https://googlecoursera.qwiklabs.com/focuses/34708884?parent=lti_session

Objectives
	1. Enable the Cloud Run API.
	2. Create a simple Node.js application that can be deployed as a serverless, stateless container.
	3. Containerize your application and upload to Container Registry (now called "Artifact Registry.")
	4. Deploy a containerized application on Cloud Run.
	5. Delete unneeded images to avoid incurring extra storage charges.

SDK used command
	//gcloud cheatsheet
		https://cloud.google.com/sdk/docs/cheatsheet

	//enable cloud run api
		gcloud services enable run.googleapis.com

	//set project
		gcloud config set project

	//set region
		gcloud config set compute/region "REGION"

	//list account name
		gcloud auth list

	//list project ID
		gcloud config list project

	//one liner with two command
		mkdir helloworld && cd helloworld

	//Build container image through gcloud command and store it ing Cloud Registry
		gcloud builds submit --tag gcr.io/$GOOGLE_CLOUD_PROJECT/helloworld

	//list container images
		gcloud container images list

	//register gcloud as credential helper for all google supported docjer registry
		gcloud auth configure-docker

	//run container from cloud shell
		docker run -d -p 8080:8080 gcr.io/$GOOGLE_CLOUD_PROJECT/helloworld

	//Verify
		curl localhost:8080

	//Deploy to cloud run
		Location=asia-southeast1
		gcloud run deploy --image gcr.io/$GOOGLE_CLOUD_PROJECT/helloworld --allow-unauthenticated --region=$LOCATION

	//Delete container image
		gcloud container images delete gcr.io/$GOOGLE_CLOUD_PROJECT/helloworld

	//Delete cloud run service
		gcloud run services delete helloworld --region="REGION"


Sample Dockerfile
	# Use the official lightweight Node.js 12 image.
	# https://hub.docker.com/_/node
	FROM node:12-slim

	# Create and change to the app directory.
	WORKDIR /usr/src/app

	# Copy application dependency manifests to the container image.
	# A wildcard is used to ensure copying both package.json AND package-lock.json (when available).
	# Copying this first prevents re-running npm install on every code change.
	COPY package*.json ./

	# Install production dependencies.
	# If you add a package-lock.json, speed your build by switching to 'npm ci'.
	# RUN npm ci --only=production
	RUN npm install --only=production

	# Copy local code to the container image.
	COPY . ./

	# Run the web service on container startup.
	CMD [ "npm", "start" ]

Quiz
1. Select the managed compute platform that lets you run stateless containers through web requests or Pub/Sub events.
	- Cloud run

2. Cloud Run can only pull images from (Select 2): 
	- Artifact Registry
	- Docker Hub

3. Why might a Google Cloud customer choose to use Cloud Functions?
	- app contains event-driven code that they don't want to provision compute resourcees for.


Week 8 Course Summary

Learning Objectives	
	1. Review learning concepts from throughout the course.

Course Summary
Module 1 - Introducing to Google Cloud
	- Google Cloud and Cloud Computing
	- Managed Infrastructure and services with IaaS and PaaS
	- The Google Cloud network
	- Security throughout the infrastructure
	- Pricing structure and billings tools

Module 2 - Resources and Access in the Cloud
	- Google Cloud Resource Hierarchy
		- Org node
			- Folders
				- Projects
					- Resources
	- Policies
	- Identity and Access Management(IAM)
	- Ways to access and interact with Google Cloud
		- Google Cloud console
		- Cloud SDK and Cloud Shell
		- APIs
		- Google Cloud App

Module 3 - VMs and Networks in the Cloud
	- Google Compute Engine(GCE)
	- Virtual Private Cloud(VPC)
	- Compute Engine's Autoscaling feature
	- Google Virtual Private Cloud compatibility features
		- Routing tables
		- Firewalls
		- VPC peering
		- Shared VPC
	- Cloud Load Balancing
	- Google Cloud Interconnect

Module 4 - Storage in the Cloud
	- Google Cloud's core storage options
		- Cloud Storage
		- Cloud Bigtable
		- Cloud SQL
		- Cloud Spanner
		- Firestore
	- Four Cloud Storage classes
		- Standard
		- Nearline
		- Coldline
		- Archive

Module 5 - Containers in the Cloud
	- Containers
	- Kubernetes
	- Google Kubernetes Engine(GKE)

Module 6 - Applications in the Cloud
	- Cloud Run
	- Cloud Functions

Course Resources links
	https://d3c33hcgiwev3.cloudfront.net/-YEvkqp0Tk-ob7J6Uzzj_w_23424d3021424220856ea3ae03e9f5a1_T-GCPFCI-B-_-Course-Resources-_-Google-Cloud-Fundamentals_-Core-Infrastructure.pdf?Expires=1710374400&Signature=MCrrmJq5Nx9aHIrDS7-3EzaSTyIdjKPBveL6-Gw0B-WB4T1qoPnamIp4a3HCc0cBGMGD2oQB9PhlxtL3l7g~on4ocQIVJdoqdikIJn6llf7Zmr-9I5-jbQORoXcQhvcRkjsiqgukNP1Rh0HXejVZL0upmPeHrMod61yURguZutM_&Key-Pair-Id=APKAJLTNE6QMUY6HBC5A



























